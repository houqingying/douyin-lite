// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: following.proto

package following

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FollowingService_FollowingAction_FullMethodName = "/following.FollowingService/FollowingAction"
	FollowingService_FollowingList_FullMethodName   = "/following.FollowingService/FollowingList"
	FollowingService_FollowerList_FullMethodName    = "/following.FollowingService/FollowerList"
	FollowingService_FriendList_FullMethodName      = "/following.FollowingService/FriendList"
)

// FollowingServiceClient is the client API for FollowingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FollowingServiceClient interface {
	FollowingAction(ctx context.Context, in *FollowingActionRequest, opts ...grpc.CallOption) (*FollowingActionResponse, error)
	FollowingList(ctx context.Context, in *FollowingListRequest, opts ...grpc.CallOption) (*FollowingListResponse, error)
	FollowerList(ctx context.Context, in *FollowerListRequest, opts ...grpc.CallOption) (*FollowerListResponse, error)
	FriendList(ctx context.Context, in *FriendListRequest, opts ...grpc.CallOption) (*FriendListResponse, error)
}

type followingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFollowingServiceClient(cc grpc.ClientConnInterface) FollowingServiceClient {
	return &followingServiceClient{cc}
}

func (c *followingServiceClient) FollowingAction(ctx context.Context, in *FollowingActionRequest, opts ...grpc.CallOption) (*FollowingActionResponse, error) {
	out := new(FollowingActionResponse)
	err := c.cc.Invoke(ctx, FollowingService_FollowingAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followingServiceClient) FollowingList(ctx context.Context, in *FollowingListRequest, opts ...grpc.CallOption) (*FollowingListResponse, error) {
	out := new(FollowingListResponse)
	err := c.cc.Invoke(ctx, FollowingService_FollowingList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followingServiceClient) FollowerList(ctx context.Context, in *FollowerListRequest, opts ...grpc.CallOption) (*FollowerListResponse, error) {
	out := new(FollowerListResponse)
	err := c.cc.Invoke(ctx, FollowingService_FollowerList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followingServiceClient) FriendList(ctx context.Context, in *FriendListRequest, opts ...grpc.CallOption) (*FriendListResponse, error) {
	out := new(FriendListResponse)
	err := c.cc.Invoke(ctx, FollowingService_FriendList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowingServiceServer is the server API for FollowingService service.
// All implementations must embed UnimplementedFollowingServiceServer
// for forward compatibility
type FollowingServiceServer interface {
	FollowingAction(context.Context, *FollowingActionRequest) (*FollowingActionResponse, error)
	FollowingList(context.Context, *FollowingListRequest) (*FollowingListResponse, error)
	FollowerList(context.Context, *FollowerListRequest) (*FollowerListResponse, error)
	FriendList(context.Context, *FriendListRequest) (*FriendListResponse, error)
	mustEmbedUnimplementedFollowingServiceServer()
}

// UnimplementedFollowingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFollowingServiceServer struct {
}

func (UnimplementedFollowingServiceServer) FollowingAction(context.Context, *FollowingActionRequest) (*FollowingActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowingAction not implemented")
}
func (UnimplementedFollowingServiceServer) FollowingList(context.Context, *FollowingListRequest) (*FollowingListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowingList not implemented")
}
func (UnimplementedFollowingServiceServer) FollowerList(context.Context, *FollowerListRequest) (*FollowerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowerList not implemented")
}
func (UnimplementedFollowingServiceServer) FriendList(context.Context, *FriendListRequest) (*FriendListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendList not implemented")
}
func (UnimplementedFollowingServiceServer) mustEmbedUnimplementedFollowingServiceServer() {}

// UnsafeFollowingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FollowingServiceServer will
// result in compilation errors.
type UnsafeFollowingServiceServer interface {
	mustEmbedUnimplementedFollowingServiceServer()
}

func RegisterFollowingServiceServer(s grpc.ServiceRegistrar, srv FollowingServiceServer) {
	s.RegisterService(&FollowingService_ServiceDesc, srv)
}

func _FollowingService_FollowingAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowingActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowingServiceServer).FollowingAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowingService_FollowingAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowingServiceServer).FollowingAction(ctx, req.(*FollowingActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowingService_FollowingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowingListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowingServiceServer).FollowingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowingService_FollowingList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowingServiceServer).FollowingList(ctx, req.(*FollowingListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowingService_FollowerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowingServiceServer).FollowerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowingService_FollowerList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowingServiceServer).FollowerList(ctx, req.(*FollowerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowingService_FriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowingServiceServer).FriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowingService_FriendList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowingServiceServer).FriendList(ctx, req.(*FriendListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FollowingService_ServiceDesc is the grpc.ServiceDesc for FollowingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FollowingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "following.FollowingService",
	HandlerType: (*FollowingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FollowingAction",
			Handler:    _FollowingService_FollowingAction_Handler,
		},
		{
			MethodName: "FollowingList",
			Handler:    _FollowingService_FollowingList_Handler,
		},
		{
			MethodName: "FollowerList",
			Handler:    _FollowingService_FollowerList_Handler,
		},
		{
			MethodName: "FriendList",
			Handler:    _FollowingService_FriendList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "following.proto",
}
