// Code generated by Kitex v0.7.0. DO NOT EDIT.

package followingservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	relation "github.com/houqingying/douyin-lite/kitex/kitex_gen/relation"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return followingServiceServiceInfo
}

var followingServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "FollowingService"
	handlerType := (*relation.FollowingService)(nil)
	methods := map[string]kitex.MethodInfo{
		"FollowingAction": kitex.NewMethodInfo(followingActionHandler, newFollowingActionArgs, newFollowingActionResult, false),
		"FollowingList":   kitex.NewMethodInfo(followingListHandler, newFollowingListArgs, newFollowingListResult, false),
		"FollowerList":    kitex.NewMethodInfo(followerListHandler, newFollowerListArgs, newFollowerListResult, false),
		"FriendList":      kitex.NewMethodInfo(friendListHandler, newFriendListArgs, newFriendListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "following",
		"ServiceFilePath": "",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.7.0",
		Extra:           extra,
	}
	return svcInfo
}

func followingActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.FollowingActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.FollowingService).FollowingAction(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *FollowingActionArgs:
		success, err := handler.(relation.FollowingService).FollowingAction(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FollowingActionResult)
		realResult.Success = success
	}
	return nil
}
func newFollowingActionArgs() interface{} {
	return &FollowingActionArgs{}
}

func newFollowingActionResult() interface{} {
	return &FollowingActionResult{}
}

type FollowingActionArgs struct {
	Req *relation.FollowingActionRequest
}

func (p *FollowingActionArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.FollowingActionRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FollowingActionArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FollowingActionArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FollowingActionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *FollowingActionArgs) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(relation.FollowingActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FollowingActionArgs_Req_DEFAULT *relation.FollowingActionRequest

func (p *FollowingActionArgs) GetReq() *relation.FollowingActionRequest {
	if !p.IsSetReq() {
		return FollowingActionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FollowingActionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FollowingActionArgs) GetFirstArgument() interface{} {
	return p.Req
}

type FollowingActionResult struct {
	Success *relation.FollowingActionResponse
}

var FollowingActionResult_Success_DEFAULT *relation.FollowingActionResponse

func (p *FollowingActionResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.FollowingActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FollowingActionResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FollowingActionResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FollowingActionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *FollowingActionResult) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(relation.FollowingActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FollowingActionResult) GetSuccess() *relation.FollowingActionResponse {
	if !p.IsSetSuccess() {
		return FollowingActionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FollowingActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.FollowingActionResponse)
}

func (p *FollowingActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FollowingActionResult) GetResult() interface{} {
	return p.Success
}

func followingListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.FollowingListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.FollowingService).FollowingList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *FollowingListArgs:
		success, err := handler.(relation.FollowingService).FollowingList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FollowingListResult)
		realResult.Success = success
	}
	return nil
}
func newFollowingListArgs() interface{} {
	return &FollowingListArgs{}
}

func newFollowingListResult() interface{} {
	return &FollowingListResult{}
}

type FollowingListArgs struct {
	Req *relation.FollowingListRequest
}

func (p *FollowingListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.FollowingListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FollowingListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FollowingListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FollowingListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *FollowingListArgs) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(relation.FollowingListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FollowingListArgs_Req_DEFAULT *relation.FollowingListRequest

func (p *FollowingListArgs) GetReq() *relation.FollowingListRequest {
	if !p.IsSetReq() {
		return FollowingListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FollowingListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FollowingListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type FollowingListResult struct {
	Success *relation.FollowingListResponse
}

var FollowingListResult_Success_DEFAULT *relation.FollowingListResponse

func (p *FollowingListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.FollowingListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FollowingListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FollowingListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FollowingListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *FollowingListResult) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(relation.FollowingListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FollowingListResult) GetSuccess() *relation.FollowingListResponse {
	if !p.IsSetSuccess() {
		return FollowingListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FollowingListResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.FollowingListResponse)
}

func (p *FollowingListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FollowingListResult) GetResult() interface{} {
	return p.Success
}

func followerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.FollowerListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.FollowingService).FollowerList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *FollowerListArgs:
		success, err := handler.(relation.FollowingService).FollowerList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FollowerListResult)
		realResult.Success = success
	}
	return nil
}
func newFollowerListArgs() interface{} {
	return &FollowerListArgs{}
}

func newFollowerListResult() interface{} {
	return &FollowerListResult{}
}

type FollowerListArgs struct {
	Req *relation.FollowerListRequest
}

func (p *FollowerListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.FollowerListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FollowerListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FollowerListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FollowerListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *FollowerListArgs) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(relation.FollowerListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FollowerListArgs_Req_DEFAULT *relation.FollowerListRequest

func (p *FollowerListArgs) GetReq() *relation.FollowerListRequest {
	if !p.IsSetReq() {
		return FollowerListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FollowerListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FollowerListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type FollowerListResult struct {
	Success *relation.FollowerListResponse
}

var FollowerListResult_Success_DEFAULT *relation.FollowerListResponse

func (p *FollowerListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.FollowerListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FollowerListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FollowerListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FollowerListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *FollowerListResult) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(relation.FollowerListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FollowerListResult) GetSuccess() *relation.FollowerListResponse {
	if !p.IsSetSuccess() {
		return FollowerListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FollowerListResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.FollowerListResponse)
}

func (p *FollowerListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FollowerListResult) GetResult() interface{} {
	return p.Success
}

func friendListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.FriendListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.FollowingService).FriendList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *FriendListArgs:
		success, err := handler.(relation.FollowingService).FriendList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FriendListResult)
		realResult.Success = success
	}
	return nil
}
func newFriendListArgs() interface{} {
	return &FriendListArgs{}
}

func newFriendListResult() interface{} {
	return &FriendListResult{}
}

type FriendListArgs struct {
	Req *relation.FriendListRequest
}

func (p *FriendListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.FriendListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FriendListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FriendListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FriendListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *FriendListArgs) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(relation.FriendListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FriendListArgs_Req_DEFAULT *relation.FriendListRequest

func (p *FriendListArgs) GetReq() *relation.FriendListRequest {
	if !p.IsSetReq() {
		return FriendListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FriendListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FriendListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type FriendListResult struct {
	Success *relation.FriendListResponse
}

var FriendListResult_Success_DEFAULT *relation.FriendListResponse

func (p *FriendListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.FriendListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FriendListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FriendListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FriendListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *FriendListResult) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(relation.FriendListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FriendListResult) GetSuccess() *relation.FriendListResponse {
	if !p.IsSetSuccess() {
		return FriendListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FriendListResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.FriendListResponse)
}

func (p *FriendListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FriendListResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FollowingAction(ctx context.Context, Req *relation.FollowingActionRequest) (r *relation.FollowingActionResponse, err error) {
	var _args FollowingActionArgs
	_args.Req = Req
	var _result FollowingActionResult
	if err = p.c.Call(ctx, "FollowingAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowingList(ctx context.Context, Req *relation.FollowingListRequest) (r *relation.FollowingListResponse, err error) {
	var _args FollowingListArgs
	_args.Req = Req
	var _result FollowingListResult
	if err = p.c.Call(ctx, "FollowingList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowerList(ctx context.Context, Req *relation.FollowerListRequest) (r *relation.FollowerListResponse, err error) {
	var _args FollowerListArgs
	_args.Req = Req
	var _result FollowerListResult
	if err = p.c.Call(ctx, "FollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FriendList(ctx context.Context, Req *relation.FriendListRequest) (r *relation.FriendListResponse, err error) {
	var _args FriendListArgs
	_args.Req = Req
	var _result FriendListResult
	if err = p.c.Call(ctx, "FriendList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
